/*
* Alarm.h
*
* Created: 20/10/2015 10:49:17
* Author: Phil2
*/


#ifndef __ALARM_H__
#define __ALARM_H__

#include "stdio.h"

#define LEDPIN_HIGH    PORTL |=  (1<<PC5)
#define LEDPIN_LOW     PORTL &= ~(1<<PC5)


#define ALARM_BLUE		1
#define ALARM_GREEN		2
#define ALARM_RED		3



typedef enum
{
 ALM_IMU_FAIL,
 ALM_ACC_NOT_CALIBRATED,
 ALM_GIRO_NOT_CALIBRATED,		
 ALM_MAG_NOT_CALIBRATED,
 ALM_BAD_EEPROM_READ,				
 ALM_EEPROM_WRITE,				
 ALM_WRITE_MAIN_CONFIG_FAIL,
 ALM_READ_MAIN_CONFIG_FAIL,
 ALM_WRITE_NAVIGATION_CONFIG_FAIL,
 ALM_READ_NAVIGATION_CONFIG_FAIL,
 ALM_WRITE_RC_CONFIG_FAIL,
 ALM_READ_RC_CONFIG_FAIL,
 ALM_WRITE_FUNCTION_CONFIG_FAIL,
 ALM_READ_FUNCTION_CONFIG_FAIL,
 ALM_CAMERA_FAIL,						
 ALM_BATTERY_1_WARN,				
 ALM_BATTERY_2_WARN,				
 ALM_BATTERY_1_CRITICAL,
 ALM_BATTERY_2_CRITICAL,
 ALM_VTX_SETTINGS,
 ALM_WIND_SENS_FAIL,						
 ALM_INIT_FAILED,					
 ALM_OPEN_SD_LOGFILE_FAULT,		
 ALM_DELETE_SD_LOGFILE_FAULT,
 ALM_READ_SD_LOGFILE_FAULT,
 ALM_OPEN_FLASH_LOGFILE_FAULT,
 ALM_READ_FLASH_LOGFILE_FAULT,
 ALM_SD_CARD_FAIL_INIT,			
 ALM_FAIL_LOAD_WAYPOINTS,			
 ALM_IN_PANIC_MODE,				
 ALM_HEAD_LIDAR_FAILED,			
 ALM_I2C_FAIL_BUS_1,					
 ALM_I2C_FAIL_BUS_0,	
 ALM_MOTOR_FAULT,
 ALM_SD_CARD_FAIL,	
 ALM_RC_DATA_LOSS,	
 ALM_FRONT_LIDAR_FAIL,
 ALM_REAR_LIDAR_FAIL,
 ALM_RIGHT_LIDAR_FAIL,
 ALM_LEFT_LIDAR_FAIL,
 //   ========  Navigation ===========
 ALM_NAV_INIT_FAILED,				
 ALM_FAIL_RETURN_TO_HOME,			
 ALM_NO_MISSION_FILE_LOADED,		
 ALM_RUNNING_NO_GPS_LOCK,         
 ALM_NAVIGATION_UPDATE_FAILED,	
 ALM_HOME_WAYPOINT_NOT_SET,		
 ALM_FAIL_WAYPOINT_1_ERROR,	
 ALM_FAIL_WAYPOINT_2_ERROR,		
 ALM_FAIL_WAYPOINT_3_ERROR,		
 ALM_FAIL_WAYPOINT_4_ERROR,		
 ALM_FAIL_WAYPOINT_5_ERROR,		
 ALM_FAIL_WAYPOINT_6_ERROR,		
 ALM_FAIL_WAYPOINT_7_ERROR,		
 ALM_FAIL_WAYPOINT_8_ERROR,		
 ALM_FAIL_WAYPOINT_9_ERROR,		
 ALM_FAIL_WAYPOINT_10_ERROR,		
 ALM_FAIL_WAYPOINT_11_ERROR,		
 ALM_FAIL_WAYPOINT_12_ERROR,		
 ALM_GPS_FAIL,
 No_OF_ALARMS,
 ALM_NOT_DEFINED				
}Alarm_t;







typedef enum Alarm_Priority
{
	 ALARM_NO_PRIORITY = 0,
	 ALARM_PRIORITY_1,
	 ALARM_PRIORITY_2,
	 ALARM_PRIORITY_3,
	 ALARM_PRIORITY_4,			
	 ALARM_PRIORITY_5,			
	 ALARM_PRIORITY_6,			
	 ALARM_PRIORITY_7,			
	 ALARM_PRIORITY_8,			
	 ALARM_PRIORITY_9,			
	 ALARM_PRIORITY_10,			
	 ALM_FRONT_OBSTACLE_PRIORITY 
}AlarmPriority_t;

#define ALM_IR_SENSOR_TRIG_PRIORITY			ALARM_PRIORITY_9
#define ALM_BATTERY_1_WARN_PRIORITY			ALARM_PRIORITY_7
#define ALM_BATTERY_2_WARN_PRIORITY			ALARM_PRIORITY_9
#define ALM_BATTERY_CRITICAL_PRIORITY		ALARM_PRIORITY_10
#define ALM_IN_PANIC_MODE_PRIORITY			ALARM_PRIORITY_10
#define ALM_BATTERY_2_WARN_PRIORITY			ALARM_PRIORITY_9
#define ALM_CALIBRATING_GIRO_PRIORITY		ALARM_PRIORITY_9
#define ALM_CALIBRATING_ACC_PRIORITY		ALARM_PRIORITY_9
#define	ALM_INIT_FAILED_PRIORITY			ALARM_PRIORITY_9
#define ALM_DATA_FLASH_FULL_PRIORITY		ALARM_PRIORITY_9
#define ALM_IMU_FAILED_READ_PRIORITY		ALARM_PRIORITY_9	
#define ALM_LASER_DIST_TIMEOUT_PRIORITY		ALARM_PRIORITY_9	
#define ALM_ALM_HEAD_SENSOR_FAIL_PRIORITY	ALARM_PRIORITY_9
#define ALM_FRONT_PATH_BLOCKED_PRIORITY		ALARM_PRIORITY_8
#define ALM_CALIBRATING_MAG_PRIORITY		ALARM_PRIORITY_8
#define ALM_RUNNING_GPS_LOCK_PRIORITY		ALARM_PRIORITY_8
#define ALM_IN_INIT_PRIORITY				ALARM_PRIORITY_8
#define ALM_IN_REVERSE_PRIORITY				ALARM_PRIORITY_7
#define ALM_IN_FORWARD_PRIORITY				ALARM_PRIORITY_7
#define ALM_ARMED_PRIORITY					ALARM_PRIORITY_6
#define ALM_UNARMED_PRIORITY				ALARM_PRIORITY_6
#define ALM_SD_CARD_FAIL_INIT_PRIORITY		ALARM_PRIORITY_5
#define ALM_I2C_FAIL_PRIORITY				ALARM_PRIORITY_9
#define ALM_NAVIGATION_UPDATE_FAILED_PRIORITY	ALARM_PRIORITY_9
#define ALM_WAYPOINT_ERROR_PRIORITY				ALARM_PRIORITY_10
#define ALM_ALM_GPS_READ_FAIL_PRIORITY			ALARM_PRIORITY_9
#define ALM_OPEN_READ_LOGFILE_FAULT_PRIORITY	ALARM_PRIORITY_8
#define ALM_OPEN_DELETE_LOGFILE_FAULT_PRIORITY	ALARM_PRIORITY_6
#define ALM_COMPASS_FAIL_PRIORITY			ALARM_PRIORITY_9
#define ALM_GPS_FAIL_PRIORITY				ALARM_PRIORITY_9
#define ALM_REAR_RANGER_FAIL_PRIORITY		ALARM_PRIORITY_9
#define ALM_RADAR_FAILED_PRIORITY			ALARM_PRIORITY_9
#define ALM_STERN_MODULE_FAIL_PRIORITY		ALARM_PRIORITY_9
#define ALM_RC_DATA_LOSS_PRIORITY			ALARM_PRIORITY_9
#define  ALM_FRONT_LIDAR_FAIL_PRIORITY		ALARM_PRIORITY_8
#define  ALM_REAR_LIDAR_FAIL_PRIORITY		ALARM_PRIORITY_8
#define  ALM_RIGHT_LIDAR_FAIL_PRIORITY		ALARM_PRIORITY_8
#define  ALM_LEFT_LIDAR_FAIL_PRIORITY		ALARM_PRIORITY_8
#define ALM_WRITE_NAVIGATION_CONFIG_FAIL_PRIORITY ALARM_PRIORITY_9
#define ALM_READ_NAVIGATION_CONFIG_FAIL_PRIORITY ALARM_PRIORITY_9
#define ALM_WRITE_MAIN_CONFIG_FAIL_PRIORITY	ALARM_PRIORITY_9
#define ALM_READ_MAIN_CONFIG_FAIL_PRIORITY	ALARM_PRIORITY_9
#define ALM_WRITE_RC_CONFIG_FAIL_PRIORITY	ALARM_PRIORITY_9
#define ALM_READ_RC_CONFIG_FAIL_PRIORITY	ALARM_PRIORITY_9
#define ALM_WRITE_FUNCTION_CONFIG_FAIL_PRIORITY	ALARM_PRIORITY_9
#define ALM_READ_FUNCTION_CONFIG_FAIL_PRIORITY	ALARM_PRIORITY_9
#define ALM_HEAD_LIDAR_FAILED_PRIORITY		ALARM_PRIORITY_9




typedef struct
{
	Alarm_t Alarm;
	unsigned char Priority;
}AlarmStuct_t;


class CAlarm
{
	//variables
public:
	unsigned char AlarmInProgress;
	unsigned char PreviousLedState;
	unsigned char AlarmIndex;
	unsigned char SoundPatternNo;
	bool CheckPriority;
	AlarmStuct_t AlarmList[16];
	unsigned char m_AlarmCount;
	uint8_t m_StatusCount;


	
protected:
private:

//functions
public:
	CAlarm();
	~CAlarm();
	uint8_t GetAlarmCount();
//		bool SendAlarm(unsigned char AlarmType,unsigned int Colour);
	void SetPiority(void);
	Alarm_t  GetTopAlarm();
	bool GetAlarmState(Alarm_t Alarm);
	void SetWaypointAlm(uint8_t WaypointNo);
	void ClearAlarm(Alarm_t Alarm);
	void AddAlarm(Alarm_t Alarm,unsigned char Priority);
	uint16_t GetAlarm(uint16_t AlarmNo);
	bool IsAlarmActive();
	void ClearAllAlarms(void);
	void SendFrame(void);
	void PlaySound(void);
	unsigned int GetLedHue(int Volts);
	void InitAlarms(void);
	bool CheckRainbowRingAlarm(unsigned char AlarmType);
	bool CheckForCancelRainbowFunction(unsigned char AlarmType);
	void SetStatusLed(bool OnOff,bool IsFlash,unsigned int Colour);
	void CheckForLedMatrixAlarm(unsigned char AlarmType);
	void CheckForCancelLedMatrixAlarm(unsigned char AlarmType);
	void ClearWaypointAlms();
	void SoundMalfunction();
	void ClearAllDirectionAlarms();
	void Update();
	void GetAlarmText(unsigned char AlarmNo,char *AlarmText);


protected:
private:
	CAlarm( const CAlarm &c );
	CAlarm& operator=( const CAlarm &c );
//	friend void INT2_vect(void);
	
}; //Alarm

#endif //__ALARM_H__
